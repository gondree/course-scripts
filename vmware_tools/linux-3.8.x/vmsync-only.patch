diff -rupN vmsync-only/shared/compat_mm.h vmsync-only-patched/shared/compat_mm.h
--- vmsync-only/shared/compat_mm.h	2012-10-31 19:03:06.000000000 -0700
+++ vmsync-only-patched/shared/compat_mm.h	2013-09-29 13:19:41.357939740 -0700
@@ -91,8 +91,9 @@ static inline struct page * alloc_pages(
 
 /*
  * In 2.4.10, vmtruncate was changed from returning void to returning int.
+ * In 3.8.10, vmtruncate was removed
  */
-#if LINUX_VERSION_CODE < KERNEL_VERSION(2, 4, 10)
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 8, 10)
 #define compat_vmtruncate(inode, size)                                        \
 ({                                                                            \
    int result = 0;                                                            \
@@ -100,7 +101,16 @@ static inline struct page * alloc_pages(
    result;                                                                    \
 })
 #else
-#define compat_vmtruncate(inode, size) vmtruncate(inode, size)
+#define compat_vmtruncate(inode, size)                                        \
+({                                                                            \
+   result = inode_newsize_ok(inode, size);                                    \
+   if (!result)                                                               \
+   {                                                                          \
+      truncate_setsize(inode, size);                                          \
+   }                                                                          \
+   result;                                                                    \
+})
++
 #endif
 
 
diff -rupN vmsync-only/sync.c vmsync-only-patched/sync.c
--- vmsync-only/sync.c	2012-10-31 19:02:27.000000000 -0700
+++ vmsync-only-patched/sync.c	2013-09-29 13:13:35.021935188 -0700
@@ -162,7 +162,11 @@ VmSyncThawDevices(void  *_state)  // IN
    cancel_delayed_work(&state->thawTask);
    list_for_each_safe(cur, tmp, &state->devices) {
       dev = list_entry(cur, VmSyncBlockDevice, list);
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 6, 0)
+      if (dev->sb != NULL && dev->sb->s_writers.frozen != SB_UNFROZEN) {
+#else
       if (dev->sb != NULL && dev->sb->s_frozen != SB_UNFROZEN) {
+#endif
          thaw_bdev(dev->bdev, dev->sb);
          atomic_dec(&gFreezeCount);
       }
@@ -237,7 +241,11 @@ VmSyncAddPath(const VmSyncState *state,
     * the superblock is already frozen.
     */
    if (inode->i_sb->s_bdev == NULL ||
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 6, 0)
+       inode->i_sb->s_writers.frozen != SB_UNFROZEN) {
+#else
        inode->i_sb->s_frozen != SB_UNFROZEN) {
+#endif
       result = (inode->i_sb->s_bdev == NULL) ? -EINVAL : -EALREADY;
       compat_path_release(&nd);
       goto exit;
